# Continuous Integration / Continuous Delivery
name: CI/CD Pipeline
on:
  push:
    branches:
      - "*"
      # exclude pushes to 'release' branch
      - '!release'
      - '!dev'
    tags:
      - v*.*.*
env:
  ### STRESS TEST Job MATRIX ###
  FULL_MATRIX_STRATEGY: "{\"platform\": [\"ubuntu-latest\", \"macos-latest\", \"windows-latest\"], \"python-version\": [\"3.10\", \"3.11\"]}"
  # Python 3.7 has reached End of Life (EOL) on June 27th, 2023
  # Python 3.12 is in bugfix mode, same as 3.11 -> can start supporting 3.12 it
  UBUNTU_PY310_STRATEGY: "{\"platform\":[\"ubuntu-latest\"], \"python-version\":[\"3.10\"]}"
  TEST_STRATEGY: "{\"platform\":[\"ubuntu-latest\", \"macos-latest\", \"windows-latest\"], \"python-version\":[\"3.9\"]}"

  ##### JOB ON/OFF SWITCHES - Top/1st level overrides #####
  RUN_UNIT_TESTS: "true"
  DOCS_ON: "true"
  ###############################

  #### DOCS Build/Test ####
  ALWAYS_DOCS: "false"
  DOCS_JOB_POLICY: '2'  # {2, 3}
  DOCS_BUILDER_RUNTIME: "3.10"

  ##########################

jobs:
  # we use the below to read the workflow env vars and be able to use in "- if:" Job conditionals
  # now we can do -> if: ${{ needs.set_github_outputs.outputs.TESTS_ENABLED == 'true' }}
  # github does not have a way to simply do "- if: ${{ env.RUN_UNIT_TESTS == 'true' }} " !!
  set_github_outputs:
    name: Read Workflow Env Section Vars and set Github Outputs
    runs-on: ubuntu-latest
    steps:
      - name: Pass 'env' section variables to GITHUB_OUTPUT
        id: pass-env-to-output
        run: |
          # set the matrix strategy to Full Matrix Stress Test if on master/main or stress-test branch or any tag
          BRANCH_NAME=${GITHUB_REF_NAME}
          if [[ $BRANCH_NAME == "stress-test" || $GITHUB_REF == refs/tags/* ]]; then
            echo "matrix=$FULL_MATRIX_STRATEGY" >> $GITHUB_OUTPUT
          else
            echo "matrix=$UBUNTU_PY310_STRATEGY" >> $GITHUB_OUTPUT
          fi
          echo "TESTS_ENABLED=$RUN_UNIT_TESTS" >> $GITHUB_OUTPUT
          echo "PUBLISH_ON_PYPI=$PUBLISH_ON_PYPI" >> $GITHUB_OUTPUT
      ## Docker - Pipeline Settings ##
      - id: derive_docker_policy
        run: echo "POL=${{ (env.DOCKER_JOB_ON != 'true' && '0') || (env.ALWAYS_BUILD_N_PUBLSIH_DOCKER == 'true' && '1') || (env.DOCKER_JOB_POLICY == 'CDeployment' && '2') || (env.DOCKER_JOB_POLICY == 'CDelivery' && '3') }}" >> $GITHUB_OUTPUT
      ## Static Code Analysis - Pipeline Settings ##
      - id: derive_sqa_policy
        run: echo "POL=${{ (env.RUN_LINT_CHECKS != 'true' && '0') || (env.ALWAYS_LINT == 'true' && '1') || env.LINT_JOB_POLICY }}" >> $GITHUB_OUTPUT
      - id: read_sqa_py
        run: echo SQA_PY=${{ env.STATIC_ANALYSIS_PY }} >> $GITHUB_OUTPUT
      - id: read_pylint_baseline_score
        run: echo PYLINT_BASELINE_SCORE=${{ env.PYLINT_SCORE_THRESHOLD }} >> $GITHUB_OUTPUT
      ## Docs Build/Test - Pipeline Settings ##
      - id: derive_docs_policy
        run: echo "POL=${{ (env.DOCS_ON != 'true' && '0') || (env.ALWAYS_DOCS == 'true' && '1') || env.DOCS_JOB_POLICY }}" >> $GITHUB_OUTPUT
      - id: read_docs_py
        run: echo DOCS_PY=${{ env.DOCS_BUILDER_RUNTIME }} >> $GITHUB_OUTPUT
      ## Code Visualization - Pipeline Settings ##
      - id: derive_code_viz_policy
        run: echo "POL=${{ (env.DRAW_DEPENDENCIES != 'true' && '0') || (env.ALWAYS_CODE_VIZ == 'true' && '1') || env.CODE_VIZ_POLICY }}" >> $GITHUB_OUTPUT
    outputs:
      matrix: ${{ steps.pass-env-to-output.outputs.matrix }}
      TESTS_ENABLED: ${{ steps.pass-env-to-output.outputs.TESTS_ENABLED }}
      PUBLISH_ON_PYPI: ${{ steps.pass-env-to-output.outputs.PUBLISH_ON_PYPI }}
    ## Docker - Pipeline Settings ##
      PIPE_DOCKER_POLICY: ${{ steps.derive_docker_policy.outputs.POL }}
    ## Static Code Analysis - Pipeline Settings ##
      PIPE_SQA_POLICY: ${{ steps.derive_sqa_policy.outputs.POL }}
      PIPE_SQA_PY: ${{ steps.read_sqa_py.outputs.SQA_PY }}
      PIPE_SQA_PYLINT_PASS_SCORE: ${{ steps.read_pylint_baseline_score.outputs.PYLINT_BASELINE_SCORE }}
    ## Docs Build/Test - Pipeline Settings ##
      PIPE_DOCS_POLICY: ${{ steps.derive_docs_policy.outputs.POL }}
      PIPE_DOCS_PY: ${{ steps.read_docs_py.outputs.DOCS_PY }}
    ## Code Visualization - Pipeline Settings ##
      PIPE_CODE_VIZ_POLICY: ${{ steps.derive_code_viz_policy.outputs.POL }}

  ### TEST Action in various End-2-End Scenarios ###
  test:
    uses: ./.github/workflows/_test.yml
    with:
      test_matrix: |
        {
          "test_data": [
            {
              "changelog": "CHANGELOG.md",
              "head_ref": "6b8a0707f43c895a7a180caee41b0aeb0a6bf77e",
              "expected_return_value": "true"
            }
          ]
        }

  ## JOB: Signal for Automated PyPI Upload ##
  check_which_git_branch_we_are_on:
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.event.ref, 'refs/tags/v') }}
    env:
      RELEASE_BR: ${{ vars.RELEASE_BRANCH || 'release' }}
      MAIN_BR: ${{ vars.MAIN_BRANCH || 'main' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - run: git branch --track "${{ env.RELEASE_BR }}" "origin/${{ env.RELEASE_BR }}"

      - name: "Check if '${{ github.ref }}' tag is on '${{ env.MAIN_BR }}' branch"
        uses: rickstaa/action-contains-tag@v1
        id: main_contains_tag
        with:
          reference: ${{ env.MAIN_BR }}
          tag: "${{ github.ref }}"
      - name: "Check if '${{ github.ref }}' tag is on '${{ env.RELEASE_BR }}' branch"
        uses: rickstaa/action-contains-tag@v1
        id: release_contains_tag
        with:
          reference: ${{ env.RELEASE_BR }}
          tag: "${{ github.ref }}"

      - name: Pick Production or Test Environment, if tag on master or release branch respectively
        id: set_environment_name
        run: |
          DEPLOY=true
          if [[ "${{ steps.main_contains_tag.outputs.retval }}" == "true" ]]; then
            echo "ENVIRONMENT_NAME=PROD_DEPLOYMENT" >> $GITHUB_OUTPUT
          elif [[ "${{ steps.release_contains_tag.outputs.retval }}" == "true" ]]; then
            echo "ENVIRONMENT_NAME=TEST_DEPLOYMENT" >> $GITHUB_OUTPUT
          else
            echo "A tag was pushed but not on master or release branch. No deployment will be done."
            DEPLOY=false
          fi
          echo "AUTOMATED_DEPLOY=$DEPLOY" >> $GITHUB_OUTPUT
    outputs:
      ENVIRONMENT_NAME: ${{ steps.set_environment_name.outputs.ENVIRONMENT_NAME }}
      AUTOMATED_DEPLOY: ${{ steps.set_environment_name.outputs.AUTOMATED_DEPLOY }}

### DOCS BUILD/TEST - DOCUMENTATION SITE ###
  docs:
    name: Build Documentation
    needs: set_github_outputs
    uses: boromir674/automated-workflows/.github/workflows/policy_docs.yml@v1.3.0
    with:
      run_policy: '${{ needs.set_github_outputs.outputs.PIPE_DOCS_POLICY }}'
      python_version: ${{ needs.set_github_outputs.outputs.PIPE_DOCS_PY }}
      command: 'tox -s false -e pin-deps -- -E docs && tox -e docs --sitepackages -vv -s false'

### Make a Github Release ###
  gh_release:
    needs: [test, check_which_git_branch_we_are_on]
    if: ${{ needs.check_which_git_branch_we_are_on.outputs.AUTOMATED_DEPLOY == 'true' }}
    uses: boromir674/automated-workflows/.github/workflows/gh-release.yml@test
    name: 'GH Release'
    with:
      tag: ${{ github.ref_name }}
      draft: ${{ needs.check_which_git_branch_we_are_on.outputs.ENVIRONMENT_NAME == 'TEST_DEPLOYMENT' }}
    secrets:
      # passing the GH_TOKEN PAT, to render in GH as ie: 'boromir674 released this yesterday', instead of 'github-actions released this yesterday'
      gh_token: ${{ secrets.GH_TOKEN }}
